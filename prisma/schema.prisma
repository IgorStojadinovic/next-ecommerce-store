// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Postojeći model korisnika sa dodatnim poljima
model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  address   String? // Opciona adresa korisnika
  phone     String? // Opcioni broj telefona
  zip       String? // Opcioni ZIP kod
  city      String? // Opciona grad
  state     String? // Opcioni state
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
  cart      Cart[]
}

// Model za proizvode
model Product {
  id         Int         @id @default(autoincrement())
  name       String
  price      Decimal
  category   Category
  stock      Int         @default(0)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  cartItems  CartItem[]
  orderItems OrderItem[]
}

// Enum za kategorije proizvoda
enum Category {
  HEADPHONES
  SPEAKERS
  EARPHONES
}

// Unapređeni model korpe
model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

// Model za stavke u korpi
model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int
  cart      Cart     @relation(fields: [cartId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId]) // Sprečava duple proizvode u korpi
}

// Unapređeni model narudžbine
model Order {
  id              Int           @id @default(autoincrement())
  userId          Int
  user            User          @relation(fields: [userId], references: [id])
  items           OrderItem[]
  status          OrderStatus   @default(PENDING)
  totalAmount     Decimal
  // Informacije o dostavi
  shippingAddress String
  shippingMethod  String
  // Informacije o plaćanju
  paymentMethod   PaymentMethod
  paymentStatus   PaymentStatus @default(PENDING)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

// Model za stavke u narudžbini
model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  order     Order    @relation(fields: [orderId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Decimal // Čuvamo cenu u trenutku kupovine
  createdAt DateTime @default(now())
}

// Enum za status narudžbine
enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

// Enum za metode plaćanja
enum PaymentMethod {
  CREDIT_CARD
  CASH_ON_DELIVERY
}

// Enum za status plaćanja
enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
